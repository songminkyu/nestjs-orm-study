/**
 * @packageDocumentation
 * @module api.functional.monitors.performance
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IEmployee } from "../../../structures/employees/IEmployee";

/**
 * Get performance information.
 *
 * Get perofmration information composed with CPU, memory and resource usage.
 *
 * @returns Performance info
 * @tag Monitor
 * @author Samchon
 *
 * @controller MonitorPerformanceController.get
 * @path GET /monitors/performance
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(connection: IConnection): Promise<get.Output> {
    return !!connection.simulate
        ? get.simulate(connection)
        : PlainFetcher.fetch(connection, {
            ...get.METADATA,
            template: get.METADATA.path,
            path: get.path(),
        });
}
export namespace get {
    export type Output = IEmployee;
    export const METADATA = {
        method: "GET",
        path: "/emp/employeeinfo",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: 200,
    } as const;

    export const path = () => "/emp/employeeinfo";
    export const random = (g?: Partial<typia.IRandomGenerator>): IEmployee =>
        typia.random<IEmployee>(g);
    export const simulate = (connection: IConnection): Output => {
        return random(
            "object" === typeof connection.simulate && null !== connection.simulate
                ? connection.simulate
                : undefined,
        );
    };
}
